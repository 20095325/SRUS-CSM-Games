import unittest
from player_bst import PlayerBST
from player import Player


class PlayerBSTTest(unittest.TestCase):

    def test_player_bst_insert_method(self):
        sut = PlayerBST()
        player = Player('123', 'John', 543)
        player2 = Player('5432', 'Marry', 87)
        player3 = Player('543', 'Brian', 421)
        player4 = Player('432', 'Aaron', 654)
        player5 = Player('765', 'John', 876)
        player_bnode = sut.insert(player)
        self.assertEqual(player_bnode.player, player)
        player2_bnode = sut.insert(player2)
        player3_bnode = sut.insert(player3)
        player4_bnode = sut.insert(player4)
        sut.insert(player5)
        self.assertEqual(player_bnode.player, player5)
        self.assertEqual(player_bnode.right.root, player2_bnode)
        self.assertEqual(player_bnode.left.root, player3_bnode)
        self.assertEqual(player_bnode.left.root.left.root, player4_bnode)

    def test_player_bst_search_method(self):
        sut = PlayerBST()
        player = Player('123', 'John', 543)
        player2 = Player('5432', 'Marry', 87)
        player3 = Player('543', 'Brian', 421)
        player4 = Player('432', 'Aaron', 654)
        player_bnode = sut.insert(player)
        player2_bnode = sut.insert(player2)
        player3_bnode = sut.insert(player3)
        player4_bnode = sut.insert(player4)
        john = sut.search('John')
        marry = sut.search('Marry')
        brian = sut.search('Brian')
        aaron = sut.search('Aaron')
        none = sut.search('Cameron')
        self.assertEqual(player_bnode, john)
        self.assertEqual(player2_bnode, marry)
        self.assertEqual(player3_bnode, brian)
        self.assertEqual(player4_bnode, aaron)
        self.assertIsNone(none)

    def test_player_bst_sorted_list_method(self):
        sut = PlayerBST()
        player = Player('123', 'John', 543)
        player2 = Player('5432', 'Marry', 87)
        player3 = Player('543', 'Brian', 421)
        player4 = Player('432', 'Aaron', 654)
        player_bnode = sut.insert(player)
        player2_bnode = sut.insert(player2)
        player3_bnode = sut.insert(player3)
        player4_bnode = sut.insert(player4)
        sorted_list = sut.sorted_list()
        self.assertEqual(sorted_list, [player4_bnode, player3_bnode, player_bnode, player2_bnode])

    def test_player_bst_balanced_bst_method(self):
        sut = PlayerBST()
        player = Player('543', 'Brian', 421)
        player2 = Player('123', 'John', 543)
        player3 = Player('432', 'Aaron', 654)
        player4 = Player('5432', 'Marry', 87)
        sut.insert(player)
        sut.insert(player2)
        sut.insert(player3)
        sut.insert(player4)
        sorted_list = sut.sorted_list()
        balanced_bst = sut.balanced_bst(sorted_list)
        self.assertEqual(balanced_bst.root.player, player2)
        self.assertEqual(balanced_bst.root.left.root.player, player)
        self.assertEqual(balanced_bst.root.right.root.player, player4)
        self.assertEqual(balanced_bst.root.left.root.left.root.player, player3)
